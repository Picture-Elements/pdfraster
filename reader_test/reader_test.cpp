// reader_test.cpp : run automatic tests on the pdf/raster reader library
//

#include <stdlib.h>
#include <stdio.h>
#include "..\pdfras_reader\pdfrasread_files.h"
#include <assert.h>
#include <direct.h>

void signature_tests()
{
	printf("--signature recognition\n");
	assert(0 == pdfras_recognize_signature(0));
	assert(0 == pdfras_recognize_signature(""));
	assert(0 == pdfras_recognize_signature("PDF-1.4\n%®âš†er-1.0\n"));
	assert(1 == pdfras_recognize_signature("%PDF-1.4\r\n%®âš†er-1.0\r\n"));
	assert(1 == pdfras_recognize_signature("%PDF-1.4\r%®âš†er-1.0\r"));
	assert(1 == pdfras_recognize_signature("%PDF-1.4\n%®âš†er-1.0\n"));
	assert(1 == pdfras_recognize_signature("%PDF-1.4\n%®âš†er-1.1\n"));
	assert(1 == pdfras_recognize_signature("%PDF-1.5\n%®âš†er-1.2\n"));
	assert(1 == pdfras_recognize_signature("%PDF-1.6\n%®âš†er-1.3\n"));
	assert(1 == pdfras_recognize_signature("%PDF-1.7\n%®âš†er-10.27\n"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\n\n%®âš†er-1.0\r\n"));
	assert(0 == pdfras_recognize_signature("%PDF"));
	assert(0 == pdfras_recognize_signature("%PDF-1.\n"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\n"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\n%"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\n%®âš†er"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\r\n%®âš†er\r\n"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\r\n%®âš†er-\r\n"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\r\n%®âš†er-1\r\n"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\r\n%®âš†er-1.\r\n"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\r\n%®âš†e-1.0\r\n"));
	// check for missing dots and dashes
	assert(0 == pdfras_recognize_signature("%PDF-14\r\n%®âš†er-1.0\r\n"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\r\n%®âš†er-10\r\n"));
	assert(0 == pdfras_recognize_signature("%PDF1.4\r\n%®âš†er-1.0\r\n"));
	assert(0 == pdfras_recognize_signature("%PDF-1.4\r\n%®âš†er1.0\r\n"));
	// check that it works with files
	assert(0 == pdfrasread_recognize_file(NULL));
	assert(0 == pdfrasread_recognize_filename("exists.not"));
	assert(0 == pdfrasread_recognize_filename("badsig1.pdf"));
	assert(0 == pdfrasread_recognize_filename("badsig2.pdf"));
	assert(1 == pdfrasread_recognize_filename("valid1.pdf"));
	// bad PDF, but has PDF/raster signature:
	assert(1 == pdfrasread_recognize_filename("bad_trailer1.pdf"));
	printf("passed\n");
}

static size_t freader(void *source, pduint32 offset, size_t length, char *buffer)
{
	FILE* f = (FILE*)source;
	if (0 != fseek(f, offset, SEEK_SET)) {
		return 0;
	}
	return fread(buffer, sizeof(pduint8), length, f);
}

static void fcloser(void* source)
{
	if (source) {
		FILE* f = (FILE*)source;
		fclose(f);
	}
}


void create_destroy_tests()
{
	printf("-- reader create/destroy tests --\n");
	t_pdfrasreader* reader = pdfrasread_create(PDFRAS_API_LEVEL, &freader, &fcloser);
	assert(reader != NULL);
	// a freshly created reader is not open:
	assert(!pdfrasread_is_open(reader));
	// closing a reader that is not open does nothing and returns FALSE:
	assert(pdfrasread_close(reader) == FALSE);
	// the source of a newly created reader is 0 (NULL)
	assert(pdfrasread_source(reader) == NULL);

	pdfrasread_destroy(reader);
	printf("passed\n");
}


void page_count_tests()
{
	printf("--page counting --\n");
	// some random PDF with 3 pages, old-style xref table:
	assert(3 == pdfrasread_page_count_filename("3pages.pdf"));
	// generated by pdfras_writer:
	assert(6 == pdfrasread_page_count_filename("valid1.pdf"));
	assert(-1 == pdfrasread_page_count_filename("bad_trailer1.pdf"));
	assert(-1 == pdfrasread_page_count_filename("badxref1.pdf"));
	printf("passed\n");
}

void page_info_tests()
{
	printf("--page info--\n");
	t_pdfrasreader* reader = pdfrasread_open_filename(PDFRAS_API_LEVEL, "valid1.pdf");
	// that should be successful:
	assert(reader != NULL);
	// After successful open, this must be TRUE:
	assert(pdfrasread_is_open(reader)==TRUE);
	// don't know what source is exactly, but assuming it's a FILE*
	// it shouldn't be NULL:
	assert(pdfrasread_source(reader) != NULL);
	// that file has 6 pages:
	assert(6 == pdfrasread_page_count(reader));

	assert(PDFRAS_GRAY8 == pdfrasread_page_format(reader, 0));
	assert(8 == pdfrasread_page_width(reader, 0));
	assert(11 == pdfrasread_page_height(reader, 0));
	assert(0 == pdfrasread_page_rotation(reader, 0));
	assert(2.0 == pdfrasread_page_horizontal_dpi(reader, 0));
	assert(2.0 == pdfrasread_page_vertical_dpi(reader, 0));

	assert(PDFRAS_GRAY16 == pdfrasread_page_format(reader, 1));
	assert(64 == pdfrasread_page_width(reader, 1));
	assert(512 == pdfrasread_page_height(reader, 1));
	assert(0 == pdfrasread_page_rotation(reader, 1));
	assert(16.0 == pdfrasread_page_horizontal_dpi(reader, 1));
	assert(128.0 == pdfrasread_page_vertical_dpi(reader, 1));

	assert(PDFRAS_BITONAL == pdfrasread_page_format(reader, 2));
	assert(850 == pdfrasread_page_width(reader, 2));
	assert(1100 == pdfrasread_page_height(reader, 2));
	assert(0 == pdfrasread_page_rotation(reader, 2));
	assert(100.0 == pdfrasread_page_horizontal_dpi(reader, 2));
	assert(100.0 == pdfrasread_page_vertical_dpi(reader, 2));

	assert(PDFRAS_BITONAL == pdfrasread_page_format(reader, 3));
	assert(2521 == pdfrasread_page_width(reader, 3));
	assert(3279 == pdfrasread_page_height(reader, 3));
	assert(0 == pdfrasread_page_rotation(reader, 3));
	assert(300.0 == pdfrasread_page_horizontal_dpi(reader, 3));
	assert(300.0 == pdfrasread_page_vertical_dpi(reader, 3));

	assert(PDFRAS_RGB24 == pdfrasread_page_format(reader, 4));
	assert(175 == pdfrasread_page_width(reader, 4));
	assert(100 == pdfrasread_page_height(reader, 4));
	assert(90 == pdfrasread_page_rotation(reader, 4));
	assert(50.0 == pdfrasread_page_horizontal_dpi(reader, 4));
	assert(50.0 == pdfrasread_page_vertical_dpi(reader, 4));

	assert(PDFRAS_RGB24 == pdfrasread_page_format(reader, 5));
	assert(850 == pdfrasread_page_width(reader, 5));
	assert(1100 == pdfrasread_page_height(reader, 5));
	assert(180 == pdfrasread_page_rotation(reader, 5));
	assert(100.0 == pdfrasread_page_horizontal_dpi(reader, 5));
	assert(100.0 == pdfrasread_page_vertical_dpi(reader, 5));

	pdfrasread_destroy(reader);
	printf("passed\n");
} // page_info_tests

void strip_data_tests()
{
	printf("-- strip data tests --\n");
	// open our standard test file
	t_pdfrasreader* reader = pdfrasread_open_filename(PDFRAS_API_LEVEL, "valid1.pdf");
	assert(reader != NULL);
	assert(pdfrasread_is_open(reader) == TRUE);
	int pages = pdfrasread_page_count(reader);
	// check out page 0
	int p = 0;
	// get the number of strips on page 0
	int page_height = pdfrasread_page_height(reader, p);
	int total_height = 0;
	int strips = pdfrasread_strip_count(reader, p);
	// get the maximum buffer size needed for any strip on this page
	size_t max_size = pdfrasread_max_strip_size(reader, p);
	pduint8* rawstrip = (pduint8*)malloc(max_size);
	assert(rawstrip != NULL);
	for (int s = 0; s < strips; s++) {
		//int h = pdfrasread_strip_height(reader, p, s);
		//assert(h > 0);
		//total_height += h;
		assert(total_height <= page_height);
		size_t rcvd = pdfrasread_read_raw_strip(reader, p, s, rawstrip, max_size);
		assert(rcvd <= max_size);
	}
	//assert(total_height == page_height);
	free(rawstrip);
	printf("passed\n");
} // strip_data_tests


int main(int argc, char* argv[])
{
	printf("pdfraster reader_test\n");
	char* cwd = _getcwd(NULL, 0);
	printf("cwd: %s\n", cwd);
	free(cwd);
	signature_tests();
	create_destroy_tests();
	page_count_tests();
	page_info_tests();
	strip_data_tests();
	printf("Hit enter to exit:\n");
	getchar();
	return 0;
}

